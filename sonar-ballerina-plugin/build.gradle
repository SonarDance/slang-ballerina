plugins {
    // Required plugin for scala projects
    id "scala"

    // Required plugin to integrate the SLang local dependencies to the final jar file
    id 'com.github.johnrengelman.shadow' version '6.1.0'

    // Required to work with Ballerina Project API's
    // id 'java'
    // id 'java-library'

    // Additional Ballerina Specific plugins
}

// Include Ballerina Specific Repository for fetching required Ballerina Plugins
//repositories {
//    maven{
//        url = 'https://maven.pkg.github.com/ballerina-platform/*'
//        credentials {
//            username System.getenv("packageUser")
//            password System.getenv("packagePAT")
//        }
//    }
//}

// Required to be defined since it's used on scala projects
sourceSets {
    main {
        scala {
            // scala output will be a dependency used by java code
            outputDir = file("$buildDir/classes/scala/main")
        }
        java {
            outputDir = file("$buildDir/classes/java/main")
        }
    }
}

// Required tasks to interlink the scala AST to SLang AST converters
tasks.compileScala.classpath = sourceSets.main.compileClasspath
tasks.compileJava.classpath += files(sourceSets.main.scala.classesDirectory)

sonarqube {
    properties {
        // Property to include trigger SonarQube plugin scans
        property 'sonar.sources', 'src/main/scala'
    }
}

dependencies {
    // Required SonarQube connecting API dependencies
    compileOnly 'org.sonarsource.api.plugin:sonar-plugin-api'
    implementation 'org.sonarsource.analyzer-commons:sonar-analyzer-commons'

    // Required dependency for sonarqube external reports
    implementation 'org.sonarsource.analyzer-commons:sonar-xml-parsing'

    // Required dependencies for the scala AST to SLang converter
    implementation('org.scalameta:scalameta_2.12:4.6.0') {
        exclude group: 'org.scalameta', module: 'semanticdb_2.12'
        exclude group: 'com.lihaoyi', module: 'fansi_2.12'
        exclude group: 'com.google.protobuf', module: 'protobuf-java'
    }

    // Dependencies required for testing the SonarQube API's
    testImplementation 'org.sonarsource.sonarqube:sonar-plugin-api-impl'
    testImplementation 'org.sonarsource.api.plugin:sonar-plugin-api-test-fixtures'

    // SLang related dependencies
    implementation project(':slang-api')
    implementation project(':slang-checks')
    implementation project(':slang-plugin')

    // Dependencies required for SLang plugin testing
    testImplementation project(':slang-testing')
    testImplementation project(':slang-antlr')
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
    testImplementation 'org.assertj:assertj-core'
    testImplementation 'org.mockito:mockito-core'
    testImplementation 'io.github.classgraph:classgraph'

    // Required dependencies for accessing the ballerina java project API
    // implementation group:'org.ballerinalang', name:'ballerina-lang', version:'2201.5.2'
    // implementation group:'org.ballerinalang', name:'ballerina-tools-api', version:'2201.5.2'
    // implementation group:'org.ballerinalang', name:'ballerina-parser', version:'2201.5.2'

    // Ballerina related dependencies
}

// Configurations for the output jar file when the gradle build is performed
jar {
    manifest {
        def displayVersion = (project.buildNumber == null ? project.version : project.version.substring(0, project.version.lastIndexOf('.')) + " (build ${project.buildNumber})")
        def buildDate = new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        attributes(
                'Build-Time': buildDate,
                'Implementation-Build': 'git rev-parse HEAD'.execute().text.trim(),
                'Plugin-BuildDate': buildDate,
                'Plugin-ChildFirstClassLoader': 'false',
                'Plugin-Class': 'org.wso2.ballerina.plugin.BallerinaPlugin',
                'Plugin-Description': 'Code Analyzer for Ballerina',
                'Plugin-Developers': 'WSO2 Team',
                'Plugin-Display-Version': displayVersion,
                'Plugin-Key': 'sonarballerina',
                'Plugin-License': 'GNU LGPL 3',
                'Plugin-Name': 'Ballerina Code Quality and Security',
                'Plugin-Organization': 'WSO2',
                'Plugin-OrganizationUrl': 'https://wso2.com/',
                'Plugin-SourcesUrl': 'https://ballerina.io/',
                'Plugin-Version': project.version,
                'Plugin-RequiredForLanguages': 'ballerina',
                'Sonar-Version': '6.7',
                'Version': "${project.version}",
                'Jre-Min-Version': '11',
        )
    }
}

// Configuration required to create the shadow jar/ jar file which contains all local plugins bundled
shadowJar {
    minimize { }

    // exclude unwanted files from being packed to decrease the jar size
    // org.scalameta:common_2.12
    exclude 'org/scalameta/overload/*'
    // org.scalameta:io_2.12
    exclude 'scala/meta/internal/io/*'
    // org.scala-lang:scala-library
    exclude 'scala/annotation/*'
    exclude 'scala/collection/parallel/**'
    exclude 'scala/concurrent/**'
    exclude 'scala/io/*'
    exclude 'scala/util/matching/*'
    exclude 'com/google/protobuf/**'

    // scala-build related files, useless for our use
    exclude '**/*.js'
    exclude '**/*.properties'
    exclude '**/*.proto'
    exclude '**/*.txt'

    // The following command actually creates the final jar file if the build is between the size ranges given
    // enforceJarSizeAndCheckContent(shadowJar.archiveFile.get().asFile, MINSIZE, MAXSIZE)
    doLast {
        enforceJarSizeAndCheckContent(shadowJar.archiveFile.get().asFile, 12_000_000L, 13_500_000L)
    }
}

artifacts {
    archives shadowJar
}

artifactoryPublish.skip = false

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact source: shadowJar, classifier: null
            artifact sourcesJar
            artifact javadocJar
        }
    }
}